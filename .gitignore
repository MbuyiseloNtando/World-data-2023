import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#Loading the dataset as df
df=pd.read_csv('world-data-2023.csv')
print(df.head(50))
print(df.info())


df.drop(columns=['Abbreviation'], inplace=True)
df.drop(columns='Longitude', inplace=True)
df.drop(columns='Latitude', inplace=True)
print(df.columns)

print(df.duplicated().sum())
print(df.isna().sum())


#Percentange of the missing values
null_mean = (df.isna().mean()*100).round(2)
print("Percentage of Null Elements in Each Column is:")
print(null_mean)

#Checking for values that might affect the Analysis
df_num = df.select_dtypes(include=[np.number])
df_cat = df.select_dtypes(include =[object])
print(df_num.head().T)
print(df_cat.describe().T)

print("Column data types are:", df.dtypes)

#Before converting numeric columns to floats, remove the units of measures($, %) and commas 
comma_cols=[]
percent_cols=[]
dollar_cols=[]
for col in df.columns:
    if df[col].dtype=="object":
        if df[col].str.contains(",").any():
            comma_cols.append(col)
        elif df[col].str.contains("%").any():
            percent_cols.append(col)
        elif df[col].str.contains("$").any():
            dollar_cols.append(col)
 
for col in percent_cols:
    df[col]=df[col].str.replace("%","")            

for col in dollar_cols:
    df[col]=df[col].str.replace("$","")
    
for col in comma_cols:
    df[col]=df[col].str.replace(",","")

df["GDP"]=df["GDP"].str.replace("$","")                                        

#Converting numerical values from objects to floats
for col in df.columns:
    if df[col].dtype=="object":
        if col == 'Density\n(P/Km2)'or col =='Land Area(Km2)'or col =='Armed Forces size'or col =='Co2-Emissions'or col =='CPI'or col =='GDP'or col =='Population'or col =='Urban_population'or col =='Agricultural Land( %)'or col =='CPI Change (%)'or col =='Forested Area (%)'or col =='Gross primary education enrollment (%)'or col =='Gross tertiary education enrollment (%)'or col =='Out of pocket health expenditure'or col =='Population: Labor force participation (%)'or col =='Tax revenue (%)'or col =='Total tax rate' or col =='Unemployment rate' or col =='Gasoline Price' or col =='Minimum wage':
            df[col]=df[col].astype("float64")
            
print(df.dtypes)            

sns.heatmap(df.corr(numeric_only=True))
plt.show()


#Country population Data Frame in a discending order
country_population =df[["Country","Population"]].dropna().sort_values(by="Population",ascending=False).reset_index()

#20 most populated countries
highest_populated=country_population[["Country","Population"]].head(20).reset_index().drop("index",axis=1)
print(highest_populated)

highest_populated.sort_index(ascending=True).set_index("Country").plot(kind="bar",color="#0F2539",legend=False)
#plt.xticks(rotation=90)

plt.title("Top 20 Populated Countries")
plt.xlabel("Population")
plt.ylabel("Country")
plt.show()

#20 least populated countries
least_populated=country_population[["Country","Population"]].tail(20).reset_index().drop("index",axis=1)
print(least_populated)

least_populated.sort_index(ascending=False).set_index("Country").plot(kind="bar",color="#0F2539",legend=False)
plt.xticks(rotation=90)

plt.title("Bottom 20 Populated Countries")
plt.xlabel("Country")
plt.ylabel("Population")
plt.show()

#Top 20 and Bottom 20 country's GDP
country_gdp=df[["Country","GDP"]].dropna().sort_values(by="GDP",ascending=False).reset_index()

highest_gdp=country_gdp[["Country", "GDP"]].head(20).reset_index().drop("index",axis=1)
print(highest_gdp)

highest_gdp.sort_index(ascending=True).set_index("Country").plot(kind="bar",color="#0F2539",legend=False)
plt.xticks(rotation=90)

plt.title("Top 20 Countries With Highest GDP")
plt.xlabel("Country")
plt.ylabel("GDP")
plt.show()


lowest_gdp=country_gdp[["Country", "GDP"]].tail(20).reset_index().drop("index",axis=1)
print(lowest_gdp)

lowest_gdp.sort_index(ascending=True).set_index("Country").plot(kind="bar",color="#0F2539",legend=False)
plt.xticks(rotation=90)
#
plt.title("20 countries with the lowest GDP")
plt.xlabel("Country")
plt.ylabel("GDP")
plt.show()

#countries with top 20 and bottom 20 country's GDP per capita
gdp_per_capita=country_gdp.GDP/country_population.Population

country_gdp.insert(3, column='gdp_per_capita',value=gdp_per_capita)

country_gdp[["Country", "gdp_per_capita"]].head(20).set_index("Country").plot(kind="bar")
plt.title('GDP Per Capita of 20 Countries With Highest GDP')
plt.show()

country_gdp[["Country", "gdp_per_capita"]].tail(20).set_index("Country").plot(kind="bar")
plt.title('GDP Per Capita of 20 Countries With lowest GDP')
plt.show()

#20 Countries with expensive Gasoline
df_gas_top20=df[["Country", "Gasoline Price"]].sort_values(by="Gasoline Price",ascending=False).dropna().head(20)
print(df_gas_top20)

df_gas_top20.set_index("Country").plot(kind="bar")
plt.title("Top 20 Countries With Most Expensive Gasoline Prices")
plt.ylabel("Gasoline Prices")
plt.show()

#20 countries with cheapest gasoline prices
df_gas_bottom20=df[["Country", "Gasoline Price"]].sort_values(by="Gasoline Price",ascending=False).dropna().tail(20)
df_gas_bottom20.set_index("Country").plot(kind="bar")
plt.title("Top 20 Countries With Cheapest Gasoline")
plt.ylabel("Gasoline Price")
plt.show()

#Life expectancy
df_life_expect=df[['Country', 'Life expectancy']].sort_values(by='Life expectancy', ascending=False).dropna().head(20)
df_life_expect.set_index('Country').plot(kind="barh", color="g")
plt.yticks(rotation=0)
plt.title("20 Countries With Highest Life Expectancy")
plt.show()

df_life_expect=df[['Country', 'Life expectancy']].sort_values(by='Life expectancy', ascending=True).dropna().head(20)
df_life_expect.set_index('Country').plot(kind="barh",color= "g")
plt.yticks(rotation=0)
plt.title("20 Countries With Lowest Life Expectancy")
plt.show()

df_labor_force =df[['Country', 'Population: Labor force participation (%)']].sort_values(by='Population: Labor force participation (%)', ascending=False).dropna()
print(df_labor_force.head(20))
print(df_labor_force.tail(20))

#Unemployment rate
df_unemployment= df[['Country','Unemployment rate']].sort_values(by='Unemployment rate', ascending=False).dropna()
print(df_unemployment.head(20))
print(df_unemployment.tail(20))

df_unemployment.head(20).set_index("Country").plot(kind='bar', color='r')
plt.title('20 Countries with highest unemployment rate')
plt.ylabel('Unemployment rate')
plt.show()

df_unemployment.tail(20).set_index('Country').plot(kind='bar', color='g')
plt.title('20 Countries with the lowest unemployment rate')
plt.ylabel("Unemployment rate")
plt.show()


#Urban population
df_urban_population= df[['Country','Urban_population']].sort_values(by='Urban_population', ascending=False).dropna()
print(df_urban_population.head(20))
print(df_urban_population.tail(20))

#urban population percentage
df_urban_population_perc= (df['Urban_population']/df['Population'])*100
df.insert(32, column='urban_population_percentage',value=df_urban_population_perc)
print(df.columns)

df[['Country', 'urban_population_percentage']].sort_values(by='urban_population_percentage', ascending=False).dropna().head(20).set_index('Country').plot(kind='bar')
plt.title('20 Countries with the highest urban population percentage')
plt.ylabel('Urban population percentage')
plt.show()

df[['Country', 'urban_population_percentage']].sort_values(by='urban_population_percentage', ascending=False).dropna().tail(20).set_index('Country').plot(kind='bar')
plt.title('20 Countries with least urban population percentage')
plt.ylabel('Urban population percentage')
plt.show()

sns.heatmap(df.corr(numeric_only=True))
plt.show()

